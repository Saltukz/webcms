// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data.Concrete.EfCore;

namespace data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20220312105313_IntialCreate")]
    partial class IntialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Granuls")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("entity.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kampanya")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("datetime2");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("entity.Dokuman", b =>
                {
                    b.Property<int>("DokumanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DokumanUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DokumanId");

                    b.ToTable("Dokumanlar");
                });

            modelBuilder.Entity("entity.DokumanCategory", b =>
                {
                    b.Property<int>("DokumanCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DokumanCategoryId");

                    b.ToTable("DokumanCategories");
                });

            modelBuilder.Entity("entity.DokumanMnMRel", b =>
                {
                    b.Property<int>("DokumanId")
                        .HasColumnType("int");

                    b.Property<int>("DokumanCategoryId")
                        .HasColumnType("int");

                    b.HasKey("DokumanId", "DokumanCategoryId");

                    b.HasIndex("DokumanCategoryId");

                    b.ToTable("DokumanMnMRel");
                });

            modelBuilder.Entity("entity.Kariyer", b =>
                {
                    b.Property<int>("KariyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Ad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BasvuruTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KariyerId");

                    b.ToTable("Kariyer");
                });

            modelBuilder.Entity("entity.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AltCap")
                        .HasColumnType("int");

                    b.Property<int>("Baski")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hacim")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KoliIciAdet")
                        .HasColumnType("int");

                    b.Property<string>("Renk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SosisIciAdet")
                        .HasColumnType("int");

                    b.Property<int>("TamHacim")
                        .HasColumnType("int");

                    b.Property<int>("TbCap")
                        .HasColumnType("int");

                    b.Property<int>("UstCap")
                        .HasColumnType("int");

                    b.Property<int>("UstGenislik")
                        .HasColumnType("int");

                    b.Property<int>("Yukseklik")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("entity.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("entity.ProjectGalery", b =>
                {
                    b.Property<int>("ProjectGalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AlanOlcumu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlanUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjeAlani")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrunAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YapimYili")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectGalleryId");

                    b.ToTable("ProjectGaleries");
                });

            modelBuilder.Entity("entity.ProjectGaleryRelation", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectGalleryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectGaleryProjectGalleryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "ProjectGalleryId");

                    b.HasIndex("ProjectGaleryProjectGalleryId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("ProjectGaleryRelation");
                });

            modelBuilder.Entity("entity.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("entity.Uygulama", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Brosur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataSheet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PdfUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SayfaResmi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uygulamalar");
                });

            modelBuilder.Entity("entity.DokumanMnMRel", b =>
                {
                    b.HasOne("entity.DokumanCategory", "DokumanCategory")
                        .WithMany("DokumanMnMRels")
                        .HasForeignKey("DokumanCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entity.Dokuman", "Dokuman")
                        .WithMany("DokumanMnMRels")
                        .HasForeignKey("DokumanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokuman");

                    b.Navigation("DokumanCategory");
                });

            modelBuilder.Entity("entity.ProductCategory", b =>
                {
                    b.HasOne("entity.Category", "ThermoformCategory")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("entity.Product", "ThermoformProduct")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThermoformCategory");

                    b.Navigation("ThermoformProduct");
                });

            modelBuilder.Entity("entity.ProjectGaleryRelation", b =>
                {
                    b.HasOne("entity.ProjectGalery", "ProjectGalery")
                        .WithMany("ProjectGaleryRelations")
                        .HasForeignKey("ProjectGaleryProjectGalleryId");

                    b.HasOne("entity.Projects", "Projects")
                        .WithMany("ProjectGaleryRelations")
                        .HasForeignKey("ProjectsProjectId");

                    b.Navigation("ProjectGalery");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("entity.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("entity.Dokuman", b =>
                {
                    b.Navigation("DokumanMnMRels");
                });

            modelBuilder.Entity("entity.DokumanCategory", b =>
                {
                    b.Navigation("DokumanMnMRels");
                });

            modelBuilder.Entity("entity.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("entity.ProjectGalery", b =>
                {
                    b.Navigation("ProjectGaleryRelations");
                });

            modelBuilder.Entity("entity.Projects", b =>
                {
                    b.Navigation("ProjectGaleryRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
